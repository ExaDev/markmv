/**
 * Auto-generated MCP tool definitions for markmv API methods
 *
 * DO NOT EDIT MANUALLY - This file is auto-generated
 */

import type { Tool } from '@modelcontextprotocol/sdk/types.js';

// Auto-generated MCP tools from JSON schemas
export const autoGeneratedMcpTools: Tool[] = [
  {
    name: 'move_file',
    description: 'Move a single markdown file and update all references',
    inputSchema: {
      type: 'object',
      properties: {
        sourcePath: {
          type: 'string',
          description: 'Source file path',
        },
        destinationPath: {
          type: 'string',
          description: 'Destination file path',
        },
        options: {
          type: 'object',
          properties: {
            dryRun: {
              type: 'boolean',
              description: 'Show changes without executing',
            },
            verbose: {
              type: 'boolean',
              description: 'Show detailed output',
            },
            force: {
              type: 'boolean',
              description: 'Force operation even if conflicts exist',
            },
            createDirectories: {
              type: 'boolean',
              description: 'Create missing directories',
            },
          },
          additionalProperties: false,
        },
      },
      required: ['sourcePath', 'destinationPath'],
      additionalProperties: false,
    },
  },
  {
    name: 'move_files',
    description: 'Move multiple markdown files and update all references',
    inputSchema: {
      type: 'object',
      properties: {
        moves: {
          type: 'array',
          description: 'Array of source/destination pairs',
          items: {
            type: 'object',
            properties: {
              source: {
                type: 'string',
              },
              destination: {
                type: 'string',
              },
            },
            required: ['source', 'destination'],
            additionalProperties: false,
          },
        },
        options: {
          type: 'object',
          properties: {
            dryRun: {
              type: 'boolean',
              description: 'Show changes without executing',
            },
            verbose: {
              type: 'boolean',
              description: 'Show detailed output',
            },
            force: {
              type: 'boolean',
              description: 'Force operation even if conflicts exist',
            },
            createDirectories: {
              type: 'boolean',
              description: 'Create missing directories',
            },
          },
          additionalProperties: false,
        },
      },
      required: ['moves'],
      additionalProperties: false,
    },
  },
  {
    name: 'validate_operation',
    description: 'Validate the result of a previous operation for broken links',
    inputSchema: {
      type: 'object',
      properties: {
        result: {
          type: 'object',
          description: 'Operation result to validate',
          properties: {
            success: {
              type: 'boolean',
            },
            modifiedFiles: {
              type: 'array',
              items: {
                type: 'string',
              },
            },
            createdFiles: {
              type: 'array',
              items: {
                type: 'string',
              },
            },
            deletedFiles: {
              type: 'array',
              items: {
                type: 'string',
              },
            },
            errors: {
              type: 'array',
              items: {
                type: 'string',
              },
            },
            warnings: {
              type: 'array',
              items: {
                type: 'string',
              },
            },
            changes: {
              type: 'array',
              items: {
                type: 'object',
              },
            },
          },
          required: [
            'success',
            'modifiedFiles',
            'createdFiles',
            'deletedFiles',
            'errors',
            'warnings',
            'changes',
          ],
          additionalProperties: false,
        },
      },
      required: ['result'],
      additionalProperties: false,
    },
  },
  {
    name: 'test_auto_exposure',
    description: 'Test function to demonstrate auto-exposure pattern',
    inputSchema: {
      type: 'object',
      properties: {
        input: {
          type: 'string',
          description: 'The input message to echo',
        },
      },
      required: ['input'],
      additionalProperties: false,
    },
  },
];

/** Get MCP tool by name */
export function getMcpToolByName(name: string): Tool | undefined {
  return autoGeneratedMcpTools.find((tool) => tool.name === name);
}

/** Get all MCP tool names */
export function getMcpToolNames(): string[] {
  return autoGeneratedMcpTools.map((tool) => tool.name);
}
