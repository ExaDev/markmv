/**
 * @fileoverview Tests for auto-generated MCP tool definitions
 * Verifies that MCP tools are properly generated with correct schemas
 */

import { describe, it, expect } from 'vitest';
import { 
  autoGeneratedMcpTools, 
  getMcpToolByName, 
  getMcpToolNames 
} from './mcp-tools.js';

describe('Auto-Generated MCP Tools', () => {
  describe('Tool Registry', () => {
    it('should export array of MCP tools', () => {
      expect(autoGeneratedMcpTools).toBeDefined();
      expect(Array.isArray(autoGeneratedMcpTools)).toBe(true);
      expect(autoGeneratedMcpTools.length).toBeGreaterThan(0);
    });

    it('should include all expected core tools', () => {
      const toolNames = getMcpToolNames();
      
      expect(toolNames).toContain('move_file');
      expect(toolNames).toContain('move_files');
      expect(toolNames).toContain('validate_operation');
      expect(toolNames).toContain('test_auto_exposure');
    });

    it('should have exactly 4 tools', () => {
      expect(autoGeneratedMcpTools).toHaveLength(4);
    });
  });

  describe('Tool Structure Validation', () => {
    it('should have valid tool structure for all tools', () => {
      autoGeneratedMcpTools.forEach(tool => {
        expect(tool).toHaveProperty('name');
        expect(tool).toHaveProperty('description');
        expect(tool).toHaveProperty('inputSchema');
        
        expect(typeof tool.name).toBe('string');
        expect(typeof tool.description).toBe('string');
        expect(typeof tool.inputSchema).toBe('object');
        expect(tool.inputSchema).not.toBeNull();
      });
    });

    it('should have valid JSON Schema structure for input schemas', () => {
      autoGeneratedMcpTools.forEach(tool => {
        const schema = tool.inputSchema;
        
        expect(schema).toHaveProperty('type');
        expect(schema.type).toBe('object');
        expect(schema).toHaveProperty('properties');
        expect(schema).toHaveProperty('required');
        expect(schema).toHaveProperty('additionalProperties');
        expect(schema.additionalProperties).toBe(false);
      });
    });
  });

  describe('Specific Tool Validation', () => {
    describe('move_file tool', () => {
      it('should have correct schema structure', () => {
        const tool = getMcpToolByName('move_file');
        
        expect(tool).toBeDefined();
        expect(tool?.name).toBe('move_file');
        expect(tool?.description).toContain('Move a single markdown file');
        
        const schema = tool?.inputSchema as any;
        expect(schema.properties).toHaveProperty('sourcePath');
        expect(schema.properties).toHaveProperty('destinationPath');
        expect(schema.properties).toHaveProperty('options');
        expect(schema.required).toContain('sourcePath');
        expect(schema.required).toContain('destinationPath');
      });
    });

    describe('move_files tool', () => {
      it('should have correct schema structure', () => {
        const tool = getMcpToolByName('move_files');
        
        expect(tool).toBeDefined();
        expect(tool?.name).toBe('move_files');
        expect(tool?.description).toContain('Move multiple markdown files');
        
        const schema = tool?.inputSchema as any;
        expect(schema.properties).toHaveProperty('moves');
        expect(schema.properties).toHaveProperty('options');
        expect(schema.required).toContain('moves');
        expect(schema.properties.moves.type).toBe('array');
      });
    });

    describe('validate_operation tool', () => {
      it('should have correct schema structure', () => {
        const tool = getMcpToolByName('validate_operation');
        
        expect(tool).toBeDefined();
        expect(tool?.name).toBe('validate_operation');
        expect(tool?.description).toContain('Validate the result');
        
        const schema = tool?.inputSchema as any;
        expect(schema.properties).toHaveProperty('result');
        expect(schema.required).toContain('result');
        expect(schema.properties.result.type).toBe('object');
      });
    });

    describe('test_auto_exposure tool', () => {
      it('should have correct schema structure', () => {
        const tool = getMcpToolByName('test_auto_exposure');
        
        expect(tool).toBeDefined();
        expect(tool?.name).toBe('test_auto_exposure');
        expect(tool?.description).toContain('Test function to demonstrate auto-exposure');
        
        const schema = tool?.inputSchema as any;
        expect(schema.properties).toHaveProperty('input');
        expect(schema.required).toContain('input');
        expect(schema.properties.input.type).toBe('string');
        expect(schema.properties.input.description).toContain('input message to echo');
      });
    });
  });

  describe('Helper Functions', () => {
    describe('getMcpToolByName', () => {
      it('should return correct tool when name exists', () => {
        const tool = getMcpToolByName('move_file');
        expect(tool).toBeDefined();
        expect(tool?.name).toBe('move_file');
      });

      it('should return undefined when name does not exist', () => {
        const tool = getMcpToolByName('nonexistent_tool');
        expect(tool).toBeUndefined();
      });

      it('should handle empty string', () => {
        const tool = getMcpToolByName('');
        expect(tool).toBeUndefined();
      });
    });

    describe('getMcpToolNames', () => {
      it('should return array of all tool names', () => {
        const names = getMcpToolNames();
        
        expect(Array.isArray(names)).toBe(true);
        expect(names).toHaveLength(4);
        expect(names).toContain('move_file');
        expect(names).toContain('move_files');
        expect(names).toContain('validate_operation');
        expect(names).toContain('test_auto_exposure');
      });

      it('should return names in consistent order', () => {
        const names1 = getMcpToolNames();
        const names2 = getMcpToolNames();
        
        expect(names1).toEqual(names2);
      });
    });
  });

  describe('Schema Compliance', () => {
    it('should have tools with unique names', () => {
      const names = autoGeneratedMcpTools.map(tool => tool.name);
      const uniqueNames = new Set(names);
      
      expect(uniqueNames.size).toBe(names.length);
    });

    it('should have non-empty descriptions for all tools', () => {
      autoGeneratedMcpTools.forEach(tool => {
        expect(tool.description.length).toBeGreaterThan(0);
        expect(tool.description.trim()).toBe(tool.description);
      });
    });

    it('should use snake_case for tool names', () => {
      autoGeneratedMcpTools.forEach(tool => {
        expect(tool.name).toMatch(/^[a-z]+(_[a-z]+)*$/);
      });
    });
  });
});